---
# tasks file for docker
- name: gather os specific variables
  include_vars: "{{ item }}"
  with_first_found:
    - files:
        - "{{ ansible_distribution }}-{{ ansible_distribution_major_version}}.yaml"
        - "{{ ansible_distribution }}.yaml"
      paths:
        - '{{role_path}}/vars'
  tags:
    - docker


- name: install dependencies
  apt:
    name: "{{item}}"
    state: present
    update_cache: yes
  loop:
    - apt-transport-https
    - ca-certificates
    - curl
    - gnupg
    - lsb-release
  tags:
    - docker

- name: add GPG key
  apt_key:
    url: https://download.docker.com/linux/debian/gpg
    state: present
  tags:
    - docker

- name: add docker repository to apt
  apt_repository:
    repo: "deb https://download.docker.com/linux/debian {{ansible_distribution_release}} stable"
    state: present
  tags:
    - docker

- name: install docker
  apt:
    name: "{{item}}"
    state: latest
    update_cache: yes
  loop:
    - docker-ce
    - docker-ce-cli
    - containerd.io

  tags:
    - docker

- name: Ensure docker has started
  service:
    name: docker
    state: started
    enabled: yes
  tags:
    - docker
- name: install packages for docker module
  package:
    name: "{{item}}"
    state: present
  loop: "{{docker_compose_packages}}"
  tags:
    - docker

## Create cleanup cronjob
- name: Create weekly docker prune cron job
  include_role:
    name: cronjob
  vars:
    cronjob_cron_name: "{{ansible_hostname}} docker pruning"
    cronjob_description: Cronjob to regularly clean up old docker images
    cronjob_job: docker image prune -f -a 
    cronjob_minute: '0'
    cronjob_hour: '0'
    cronjob_weekday: '1'
    cronjob_tags:
      - docker
  tags:
    - docker
