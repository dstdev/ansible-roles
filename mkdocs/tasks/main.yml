---
- name: Gather os specific variables
  ansible.builtin.include_vars: "{{ item }}"
  with_first_found:
    - files:
        - "{{ ansible_os_family }}.yaml"
        - "{{ ansible_os_family }}-{{ ansible_distribution_major_version }}\
           .yaml"
      paths:
        - "{{ role_path }}/vars"
  tags:
    - mkdocs

- name: Create mkdocs root directory
  ansible.builtin.file:
    path: "{{mkdocs_root_dir}}"
    state: directory
  tags:
    - mkdocs 
      
- name: Create mkdocs dest directory
  ansible.builtin.file:
    path: "{{mkdocs_www_dest}}"
    state: directory
  tags:
    - mkdocs 

- name: Install python dependencies
  ansible.builtin.package:
    name: "{{item}}"
    state: present
  loop: "{{mkdocs_required_packages}}"
  tags:
    - mkdocs

- name: "Clone repository"
  ansible.builtin.git:
    repo: "{{mkdocs_repo_url}}"
    dest: "{{mkdocs_repo_dest}}"
  tags:
    - mkdocs

- name: Install mkdocs
  ansible.builtin.pip:
    name: "{{mkdocs_python_packages}}"
    virtualenv: "{{mkdocs_venv}}"
    virtualenv_python: "python3"
  tags:
    - mkdocs

- name: Create build script
  ansible.builtin.template:
    src: mkdocs_build.j2
    dest: "{{mkdocs_venv}}/bin/mkdocs_build"
    mode: "0770"
  tags:
    - mkdocs

- name: Create cronjob
  ansible.builtin.cron:
    name: "Mkdocs build"
    state: present
    special_time: "hourly"
    job: "{{mkdocs_venv}}/bin/mkdocs_build"
  tags:
    - mkdocs

- name: Check index.html exists
  ansible.builtin.stat:
    path: "{{mkdocs_www_dest}}/index.html"
  register: index_exists
  tags:
    - mkdocs

- name: Run cronjob if index.html does not exist
  shell: "{{mkdocs_venv}}/bin/mkdocs_build"
  when: not index_exists.stat.exists
  tags:
    - mkdocs
